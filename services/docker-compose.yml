version: "3.9"
services:
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: always
    expose:
      - 8080
      - 9443
      - 9000
    volumes:
      - "./portainer/data:/data"
      - ".:/silver/dev"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=web"
      - "traefik.http.routers.portainer.rule=Host(`portainer.silver.box`)"
      - "traefik.http.routers.portainer.tls=false"
      - "traefik.http.services.portainer.loadBalancer.server.port=9000"
      - "traefik.http.services.portainer.loadbalancer.server.scheme=http"

  dev:
    container_name: dev
    image: ubuntu:latest
    command: sleep infinity
    restart: unless-stopped

  shellinabox:
    container_name: shellinabox
    image: sspreitzer/shellinabox:latest
    expose:
      - 4200
    env_file:
      - ./siab/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.shellinabox.entrypoints=web"
      - "traefik.http.routers.shellinabox.rule=Host(`siab.silver.box`)"
      - "traefik.http.routers.shellinabox.tls=false"
      - "traefik.http.services.shellinabox.loadBalancer.server.port=4200"
      - "traefik.http.services.shellinabox.loadbalancer.server.scheme=http"

  whoami:
    image: traefik/whoami:latest
    container_name: "whoami"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.entrypoints=web"
      - "traefik.http.routers.whoami.rule=(Host(`silver.rojo.dev`) || Host(`silver.box`)) && Path(`/whoami`)"
      - "traefik.http.routers.whoami.tls=false"

  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    expose:
      - "8079"
    env_file:
      - ./traefik/.env
    environment:
      - TZ=Europe/Berlin
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/:/etc/traefik/"
      - "./traefik/access.log:/var/log/access.log"
      - "./traefik/acme/acme.json:/etc/traefik/acme/acme.json:rw"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=cf"
      - "traefik.http.routers.dashboard.entryPoints=tls"
      - "traefik.http.routers.dashboard.tls.domains[0].main=silver.rojo.dev"
      - "traefik.http.routers.dashboard.tls.domains[0].main=*.rojo.dev"
      - "traefik.http.routers.dashboard.rule=(Host(`silver.box`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`)))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=rojo:$$apr1$$SIZrH8yM$$ePRmpk0kTf6u5sz8FSkMy."

  authelia:
    image: authelia/authelia
    container_name: authelia
    volumes:
      - ./authelia/config:/config
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.authelia.rule=Host(`authelia.rojo.dev`)'
      - 'traefik.http.routers.authelia.entrypoints=tls'
      - 'traefik.http.routers.authelia.tls=true'
      - 'traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://authelia.rojo.dev'
      - 'traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true'
      - 'traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email'
    expose:
      - 9091
    restart: unless-stopped
    healthcheck:
      disable: true
    environment:
      - TZ=Europe/Berlin
      - PUID=1000
      - PGID=1000

  heimdall:
    image: lscr.io/linuxserver/heimdall
    container_name: heimdall
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    volumes:
      - ./heimdall/config:/config
    expose:
      - 80
      - 443
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall.tls=false"
      - "traefik.http.routers.heimdall.entrypoints=web"
      - "traefik.http.routers.heimdall.rule=Host(`heimdall.silver.box`) || Host(`heimdall.rojo.dev`)"
      - "traefik.http.services.heimdall.loadbalancer.server.port=80"
      - "traefik.http.services.heimdall.loadbalancer.server.scheme=http"

  homer:
    image: b4bz/homer:latest
    container_name: homer
    volumes:
      - ./homer/www/assets:/www/assets
    environment:
      - UID=1000
      - GID=1000
    expose:
      - 8080
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homer.tls=false"
      - "traefik.http.routers.homer.entrypoints=web"
      - "traefik.http.routers.homer.rule=Host(`homer.silver.box`) || Host(`homer.rojo.dev`)"
      - "traefik.http.services.homer.loadbalancer.server.port=8080"
      - "traefik.http.services.homer.loadbalancer.server.scheme=http"

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    dns: 127.0.0.1
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    expose:
      - 80
    environment:
      TZ: 'Europe/Berlin'
      VIRTUAL_HOST: silver.box
    volumes:
      - './pihole/etc-pihole/:/etc/pihole/'
      - './pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/'
      # - './pihole/etc-lighttpd/:/etc/lighttpd/'
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.tls=false"
      - "traefik.http.routers.pihole.entrypoints=web"
      - "traefik.http.routers.pihole.rule=Host(`pihole.silver.box`) || Host(`pihole.rojo.dev`)"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
      - "traefik.http.services.pihole.loadbalancer.server.scheme=http"

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    expose:
      - 9090
    volumes:
      - './prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.silver.box`)"
      - "traefik.http.routers.prometheus.tls=false"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.services.prometheus.loadbalancer.server.scheme=http"

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    expose:
      - 3000
    volumes:
      - './grafana/data/:/var/lib/grafana'
      - './grafana/grafana.ini:/etc/grafana/grafana.ini:ro'
    environment:
      - "GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel"
    restart: unless-stopped
    user: '1000'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.routers.grafana.rule=Host(`grafana.silver.box`)"
      - "traefik.http.routers.grafana.tls=false"
      - "traefik.http.services.grafana.loadBalancer.server.port=3000"
      - "traefik.http.services.grafana.loadbalancer.server.scheme=http"

  cloudflare-ddns:
    image: timothyjmiller/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    security_opt:
      - no-new-privileges:true
    network_mode: "host"
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./cloudflare-ddns/config.json:/config.json
    restart: unless-stopped

  wr3nch:
    build: ./discord-musicbot
    image: discord-musicbot:latest
    container_name: wr3nch
    restart: unless-stopped
    expose:
      - 3000
    depends_on:
      - lavalink
    volumes:
      - ./discord-musicbot/botconfig.js:/usr/src/app/botconfig.js:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wr3nch.entrypoints=web"
      - "traefik.http.routers.wr3nch.rule=Host(`wr3nch.silver.box`)"
      - "traefik.http.routers.wr3nch.tls=false"
      - "traefik.http.services.wr3nch.loadBalancer.server.port=3000"
      - "traefik.http.services.wr3nch.loadbalancer.server.scheme=http"

  lavalink:
    image: fredboat/lavalink:dev
    container_name: lavalink
    hostname: lavalink
    restart: unless-stopped
    expose:
      - 80
    volumes:
      - ./lavalink/application.yml:/opt/Lavalink/application.yml:ro

  t35t:
    build: ./discord-jmusicbot
    image: discord-jmusicbot:latest
    container_name: t35t
    restart: unless-stopped
    volumes:
      - ./discord-jmusicbot/config.txt:/usr/src/JMusicBot/config.txt:ro

  f1x:
    build: ./discord-f1x
    image: discord-f1x:latest
    container_name: f1x
    restart: unless-stopped
    volumes:
      - ./discord-f1x/.env:/usr/src/f1x/.env:ro

  ftpgrab:
    image: crazymax/ftpgrab:latest
    container_name: ftpgrab
    volumes:
      - ./ftpgrab/db:/db:rw
      - ./ftpgrab/download:/download:rw
      - ./ftpgrab/ftpgrab.yml:/ftpgrab.yml:ro
    environment:
      - "TZ=Europe/Berlin"
      - "SCHEDULE=*/30 * * * *"
      - "LOG_LEVEL=info"
      - "LOG_JSON=false"
    restart: always

  code:
    image: lscr.io/linuxserver/code-server
    container_name: code
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      # - PASSWORD=password #optional
      # - HASHED_PASSWORD= #optional
      # - SUDO_PASSWORD=password #optional
      # - SUDO_PASSWORD_HASH= #optional
      # - PROXY_DOMAIN=code-server.my.domain #optional
      - DEFAULT_WORKSPACE=/config/dev #optional
    volumes:
      - ./code/.config:/home/coder/.config
      - ./:/config/dev
    expose:
      - 8443
    restart: unless-stopped

  satisfactory:
    container_name: 'satisfactory'
    hostname: 'satisfactory-server'
    image: 'wolveix/satisfactory-server:latest'
    ports:
      - '7777:7777/udp'
      - '15000:15000/udp'
      - '15777:15777/udp'
    environment:
      - DEBUG=false
      - MAXPLAYERS=8
      - PGID=1000
      - PUID=1000
      - SKIPUPDATE=false
      - STEAMBETA=true
    restart: unless-stopped
    volumes:
      - '/home/rojo/dev/satisfactory:/config'